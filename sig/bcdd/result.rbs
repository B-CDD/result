module BCDD
  class Result
    VERSION: String
  end
end

class BCDD::Result
  attr_reader type: Symbol
  attr_reader value: untyped

  def initialize: (type: Symbol, value: untyped) -> void

  def success?: (?Symbol type) -> bool
  def failure?: (?Symbol type) -> bool

  def value_or: { () -> untyped } -> untyped

  def ==: (untyped) -> bool
  alias eql? ==

  def hash: -> Integer

  def inspect: -> String

  def on: (*Symbol) { (untyped, Symbol) -> void } -> BCDD::Result
  def on_success: (*Symbol) { (untyped, Symbol) -> void } -> BCDD::Result
  def on_failure: (*Symbol) { (untyped, Symbol) -> void } -> BCDD::Result

  def and_then: { (untyped) -> untyped } -> BCDD::Result

  alias data value
  alias data_or value_or
  alias on_type on

  private

  def expected_type?: (Array[Symbol]) -> bool
  def allowed_to_handle?: (Array[Symbol]) -> bool
end

class BCDD::Result
  class Failure < BCDD::Result
  end

  def self.Success: (Symbol type, untyped value) -> BCDD::Result::Success
end

class BCDD::Result
  class Success < BCDD::Result
  end

  def self.Failure: (Symbol type, untyped value) -> BCDD::Result::Failure
end

class BCDD::Result
  class Error < ::StandardError
    class NotImplemented < BCDD::Result::Error
    end

    class MissingTypeArgument < BCDD::Result::Error
    end

    class UnexpectedBlockResult < BCDD::Result::Error
    end
  end
end
