module BCDD
  module Result
    VERSION: String
  end
end

module BCDD::Result
  class Error < ::StandardError
    class NotImplemented < BCDD::Result::Error
    end

    class MissingTypeArgument < BCDD::Result::Error
    end

    class UnexpectedBlockResult < BCDD::Result::Error
    end
  end
end

module BCDD::Result
  class Base
    attr_reader type: Symbol
    attr_reader value: untyped

    def initialize: (type: Symbol, value: untyped) -> void

    def success?: (?Symbol type) -> bool
    def failure?: (?Symbol type) -> bool

    def value_or: { () -> untyped } -> untyped

    def ==: (untyped) -> bool
    alias eql? ==

    def hash: -> Integer

    def inspect: -> String

    alias data value
    alias data_or value_or

    def on: (*Symbol) { (untyped, Symbol) -> void } -> BCDD::Result::Base

    alias on_type on

    def on_success: (*Symbol) { (untyped, Symbol) -> void } -> BCDD::Result::Base
    def on_failure: (*Symbol) { (untyped, Symbol) -> void } -> BCDD::Result::Base

    def and_then: { (untyped) -> untyped } -> BCDD::Result::Base

    private

    def expected_type?: (Array[Symbol]) -> bool
    def allowed_to_handle?: (Array[Symbol]) -> bool
  end
end

module BCDD::Result
  class Failure < BCDD::Result::Base
  end

  def self.Success: (Symbol type, untyped value) -> BCDD::Result::Success
end

module BCDD::Result
  class Success < BCDD::Result::Base
  end

  def self.Failure: (Symbol type, untyped value) -> BCDD::Result::Failure
end
