class BCDD::Result
  module Transitions
    module Tracking
      EMPTY_HASH: Hash[untyped, untyped]
      EMPTY_ARRAY: Array[untyped]
      VERSION: Integer
      EMPTY: Hash[Symbol, untyped]


      class Enabled
        private attr_accessor root: Hash[Symbol, untyped]
        private attr_accessor parent: Hash[Symbol, untyped]
        private attr_accessor current: Hash[Symbol, untyped]
        private attr_accessor parents: Hash[String, untyped]
        private attr_accessor records: Array[Hash[Symbol, untyped]]
        private attr_accessor current_and_then: Hash[Symbol, untyped]

        def start: (id: String, name: String, desc: String) -> void
        def finish: (id: String, result: BCDD::Result) -> void
        def reset!: () -> void
        def record: (BCDD::Result) -> void
        def record_and_then: ((untyped), untyped, untyped) { () -> BCDD::Result } -> BCDD::Result

        private

        def root_start: (String id, String name, String desc) -> void

        def track: (BCDD::Result, time: Time) -> void

        def reset_current_and_then!: () -> void
      end

      module Disabled
        def self.start: (id: String, name: String, desc: String) -> void
        def self.finish: (id: String, result: BCDD::Result) -> void
        def self.reset!: () -> void
        def self.record: (BCDD::Result) -> void
        def self.record_and_then: ((untyped), untyped, untyped) { () -> BCDD::Result } -> BCDD::Result
      end

      def self.instance: () -> (Enabled | singleton(Disabled))
    end

    THREAD_VAR_NAME: Symbol

    def self.tracking: () -> (Tracking::Enabled | singleton(Tracking::Disabled))
  end
end
